import ctypes
import numpy as np
import matplotlib.pyplot as plt

# --- 1. Load the Shared C Library ---
# Make sure 'line_generator.so' is in the same directory
try:
    c_lib = ctypes.CDLL('./line.so')
except OSError as e:
    print("Error: Could not load 'line.so'")
    print("Please compile 'line_generator.c' first using:")
    print("gcc -shared -o line_generator.so -fPIC line_generator.c")
    exit()

# --- 2. Define the Python Interface for the C Function ---
# Correctly define the argument types for the C function.
# The last two arguments are pointers to 1D NumPy arrays of doubles.
c_lib.generate_line_points.argtypes = [
    ctypes.c_double, ctypes.c_double,
    ctypes.c_double, ctypes.c_double,
    ctypes.c_int,
    np.ctypeslib.ndpointer(dtype=np.double, ndim=1, flags='C_CONTIGUOUS'),
    np.ctypeslib.ndpointer(dtype=np.double, ndim=1, flags='C_CONTIGUOUS')
]
c_lib.generate_line_points.restype = None


# --- 3. Prepare Data for the Line and Point ---
# The line is 3y = (5/3)x + 7  or y = (5/9)x + 7/3

# To use our C function, we find two points on the line.
# Let's pick x = -12 and x = 5 to get a good range.
x1 = -12.5
y1 = (5/9)*x1 + (7/3)
A = np.array([x1, y1])

x2 = 5.0
y2 = (5/9)*x2 + (7/3)
B = np.array([x2, y2])

# This is the specific point we want to show on the line
P = np.array([3.0, 4.0])

num_points = 100 # Number of points to make the line smooth

# Create empty NumPy arrays to be filled by the C function
line_x = np.zeros(num_points, dtype=np.double)
line_y = np.zeros(num_points, dtype=np.double)


# --- 4. Call the C Function ---
c_lib.generate_line_points(
    A[0], A[1],       # Start point A
    B[0], B[1],       # End point B
    num_points,
    line_x,           # Output array for x-coords
    line_y            # Output array for y-coords
)


# --- 5. Plot the Results ---
plt.figure(figsize=(8, 6))

# Plot the line generated by the C code
a = 5/3
plt.plot(line_x, line_y, label=f'Line 3y = ({a:.2f})x + 7')

# Plot the specific point, ensuring coordinates are Python ints for the label
plt.plot(P[0], P[1], 'ro', markersize=8, label=f'Point {tuple(map(int, P))}')

# Add styling to match the example image
plt.title("Verification Plot")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.grid(True)
plt.legend()
plt.axis('equal')
plt.show()


